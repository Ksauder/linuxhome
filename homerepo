#!/usr/bin/env python3
from typing import List
import sys
from pathlib import Path
import argparse

from lib.pyhomerepo.src.install_mgr import Installer
from lib.pyhomerepo.src.bootstrap import bootstrap, unbootstrap


default_stow_packages = ["git", "kitty", "nvim", "tmux", "vim", "zsh"]


def main():
    parser = argparse.ArgumentParser(
        description="Universal package manager to leverage scripted installs with system package manager fallback",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s install vim
  %(prog)s uninstall vim
""",
    )
    parser.add_argument(
        "--dry-run", help="No action will be taken", action="store_true"
    )
    subparsers = parser.add_subparsers(dest="command", help="Available commands")

    bootstrap_parser = subparsers.add_parser(
        "bootstrap", help="Link dotfiles using stow"
    )
    bootstrap_parser.add_argument(
        "stow_packages",
        nargs="*",
        help="Package name for stow to link dotfiles for. Default: "
        + str(default_stow_packages),
        default=default_stow_packages,
    )

    unbootstrap_parser = subparsers.add_parser(
        "unbootstrap", help="Unlink dotfiles using stow"
    )
    unbootstrap_parser.add_argument(
        "stow_packages",
        nargs="*",
        help="Package name for stow to unlink dotfiles for. Default: "
        + str(default_stow_packages),
        default=default_stow_packages,
    )

    install_parser = subparsers.add_parser("install", help="Install a packages")
    install_parser.add_argument("packages", nargs="+", help="Package name to install")

    uninstall_parser = subparsers.add_parser("uninstall", help="Uninstall packages")
    uninstall_parser.add_argument(
        "packages", nargs="+", help="Package name to uninstall"
    )

    args = parser.parse_args()
    if not args.command:
        parser.print_help()
        sys.exit(1)

    # Execute command
    if args.command == "bootstrap":
        success = bootstrap(args.stow_packages, dry_run=args.dry_run)
    elif args.command == "unbootstrap":
        success = unbootstrap(args.stow_packages, dry_run=args.dry_run)
    elif args.command == "install":
        pm = Installer(args.packages, dry_run=args.dry_run)
        success = pm.install()
    elif args.command == "uninstall":
        pm = Installer(args.packages, dry_run=args.dry_run)
        success = pm.uninstall()
    else:
        parser.print_help()
        sys.exit(1)

    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
